import { Component } from '@angular/core';
import {FormControl, FormGroup, Validators} from "@angular/forms";
import {Router} from "@angular/router";
import {AuthResponse, AuthService} from "../auth.service";
import {Login} from "../../model/login.model";
import {Role} from "../../model/user.model";
import {error} from "@angular/compiler-cli/src/transformers/util";
import {RecaptchaLoaderService} from "../../service/recaptcha-loader";


declare var grecaptcha: any;

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.css']
})

export class LoginComponent {

  //moze se razlikovati, ukoliko captcha nije string ---> IZMENI!!!
  recaptchaFormControl = new FormControl(false, Validators.required);

  userRole: string = Role.UNKNOWN;
  siteKey: string = '6LfPBd4pAAAAAOz2SvGECUrynQQhc_BKbjK68pob'; // Replace with your actual Site Key
  hide = true;


  constructor(private authService: AuthService,
              private router: Router,
              private recaptchaLoaderService: RecaptchaLoaderService) {

  }

  ngOnInit(): void {
    this.recaptchaLoaderService.loadScript().then(() => {
      (window as any)['onRecaptchaLoadCallback'] = () => {
        grecaptcha.render('recaptchaElement', {
          'sitekey': this.siteKey,
          'callback': (response: string) => {
            this.onCaptchaResolved(response);
          }
        });
      };
    });
  }




  loginForm = new FormGroup({
    email: new FormControl('', Validators.required),
    password: new FormControl('', Validators.required),
    recaptcha: this.recaptchaFormControl // Add this form control
  })

  login(): void {
    if(this.loginForm.valid) {

      const recaptchaResponse = grecaptcha.getResponse();

      console.log("Captcha: ", recaptchaResponse)

      if (!recaptchaResponse) {
        alert('Please complete the reCAPTCHA');
        return;
      }

      this.recaptchaFormControl.setValue(true);
      const login: Login = {
        email: this.loginForm.value.email || "test",
        password: this.loginForm.value.password || "test",
        recaptchaToken: recaptchaResponse
      }

      this.userRole = this.authService.getRole(); //nepotrebna linija?

      this.authService.login(login).subscribe({

        next: (response: AuthResponse) => {
          if (!response) {
            alert("Account not verified yet!!!");
          } else {
            localStorage.setItem('user', response.accessToken);
            this.authService.setUser();
            this.authService.setUserDetails();
            this.router.navigate(['main']);
          }
        },
        error: (error) => {
          alert('Bad credentials or account not verified yet');
        }
      })
    }
    else{
      alert('Bad credentials');
    }
  }

  email: string = '';
  password: string = '';

  onCaptchaResolved(response: string): void {
    // 'response' contains the token generated by reCAPTCHA
    console.log('reCAPTCHA response:', response);
    // You can perform further actions here, such as setting a flag to indicate that the captcha has been resolved
  }

  protected readonly Role = Role;
}
